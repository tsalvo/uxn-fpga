#pragma once
#include "uintN_t.h"  // uintN_t types for any N
#include <stdint.h>

/* ANNOTATED ASSEMBLY
|0100
  LIT2r 0000 main_ POP2r BRK
( bss )
@tmp_ $2
@yy_ $2
@xx_ $2
@i_ $2
@y_ $2
@x_ $2
@y0_ $2
@x0_ $2
( data )
( text )

@mul_ ( y* x* -- result* )
	OVR2r LIT2r 0006 SUB2r STH2kr #0004 ADD2 STA2
	STH2kr INC2 INC2 STA2
	#0001 STH2kr STA2
	STH2kr #0004 ADD2 LDA2 #8000 AND2 #0000 EQU2 ?&end.1
	#0000 STH2kr #0004 ADD2 LDA2 SUB2 STH2kr #0004 ADD2 STA2
	STH2kr LDA2k #ffff MUL2 SWP2 STA2

  &end.1
	STH2kr INC2 INC2 LDA2 #8000 AND2 #0000 EQU2 ?&end.2
	#0000 STH2kr INC2 INC2 LDA2 SUB2 STH2kr INC2 INC2 STA2
	STH2kr LDA2k #ffff MUL2 SWP2 STA2

  &end.2
	STH2kr LDA2 STH2kr INC2 INC2 LDA2 #00ff AND2 STH2kr #0004 ADD2 LDA2 #00ff AND2 MUL2 #08 SFT2 STH2kr INC2 INC2 LDA2 #00ff AND2 STH2kr #0004 ADD2 LDA2 #08 SFT2 MUL2 ADD2 STH2kr INC2 INC2 LDA2 #08 SFT2 STH2kr #0004 ADD2 LDA2 #00ff AND2 MUL2 ADD2 STH2kr INC2 INC2 LDA2 #08 SFT2 STH2kr #0004 ADD2 LDA2 #08 SFT2 MUL2 #0840 SFT SFT2 ADD2 MUL2 !&return
	#0000

  &return
	POP2r JMP2r

@main_ ( -- result* )
	OVR2r #08df #08 DEO2 #12bf #0a DEO2 #549d #0c DEO2 #0140 #22 DEO2 #0120 #24 DEO2 #ff00 ;x0_ STA2

  &begin.1
	;x0_ LDA2 #8000 EOR2 #8040 LTH2 #00 EQU ?&break.1
	#ff70 ;y0_ STA2

  &begin.2
	;y0_ LDA2 #8000 EOR2 #8000 GTH2 #00 SWP #01 EOR #0000 EQU2 ?&break.2
	#0000 ;x_ STA2
	#0000 ;y_ STA2
	#0000 ;i_ STA2

  &begin.3
	;i_ LDA2 #8000 EOR2 #8019 LTH2 #00 EQU ?&break.3
	#8400 ;x_ LDA2 ;x_ LDA2 mul_
	;xx_ STA2k
	POP2 ;y_ LDA2 ;y_ LDA2 mul_
	;yy_ STA2k
	POP2 ADD2 #8000 EOR2 LTH2 #00 EQU ?&end.4
	!&break.3

  &end.4
	;xx_ LDA2 ;yy_ LDA2 SUB2 ;x0_ LDA2 #10 SFT2 ADD2 ;tmp_ STA2
	;y_ LDA2 ;x_ LDA2 mul_
	#10 SFT2 ;y0_ LDA2 #10 SFT2 ADD2 ;y_ STA2
	;tmp_ LDA2 ;x_ STA2

  &continue.3
	;i_ LDA2k INC2 SWP2 STA2
	!&begin.3

  &break.3
	;i_ LDA2 ;x0_ LDA2 ;y0_ LDA2 ADD2 #0001 AND2 ADD2 #03 SFT2 ;tmp_ STA2
	;x0_ LDA2 #0100 ADD2 #28 DEO2 ;y0_ LDA2 #0090 ADD2 #2a DEO2 ;tmp_ LDA2 NIP #2e DEO #0090 ;y0_ LDA2 SUB2 #2a DEO2 ;tmp_ LDA2 NIP #2e DEO

  &continue.2
	;y0_ LDA2k INC2 SWP2 STA2
	!&begin.2

  &break.2

  &continue.1
	;x0_ LDA2k INC2 SWP2 STA2
	!&begin.1

  &break.1
	#0000

  &return
	POP2r JMP2r

*/
uint8_t read_rom_byte(uint16_t read_address)
{
	// set palette and draw 4 pixels
	static uint8_t uxn_rom[1024] = {
	  0xE0, 0x00, 0x00, 0x60, 0x00, 0xD0, 0x62, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x67, 0xE0, 0x00, 0x06, 0x79, 0xEF, 0xA0, 0x00,
	  0x04, 0x38, 0x35, 0xEF, 0x21, 0x21, 0x35, 0xA0,
	  0x00, 0x01, 0xEF, 0x35, 0xEF, 0xA0, 0x00, 0x04,
	  0x38, 0x34, 0xA0, 0x80, 0x00, 0x3C, 0xA0, 0x00,
	  0x00, 0x28, 0x20, 0x00, 0x18, 0xA0, 0x00, 0x00,
	  0xEF, 0xA0, 0x00, 0x04, 0x38, 0x34, 0x39, 0xEF,
	  0xA0, 0x00, 0x04, 0x38, 0x35, 0xEF, 0xB4, 0xA0,
	  0xFF, 0xFF, 0x3A, 0x24, 0x35, 0xEF, 0x21, 0x21,
	  0x34, 0xA0, 0x80, 0x00, 0x3C, 0xA0, 0x00, 0x00,
	  0x28, 0x20, 0x00, 0x14, 0xA0, 0x00, 0x00, 0xEF,
	  0x21, 0x21, 0x34, 0x39, 0xEF, 0x21, 0x21, 0x35,
	  0xEF, 0xB4, 0xA0, 0xFF, 0xFF, 0x3A, 0x24, 0x35,
	  0xEF, 0x34, 0xEF, 0x21, 0x21, 0x34, 0xA0, 0x00,
	  0xFF, 0x3C, 0xEF, 0xA0, 0x00, 0x04, 0x38, 0x34,
	  0xA0, 0x00, 0xFF, 0x3C, 0x3A, 0x80, 0x08, 0x3F,
	  0xEF, 0x21, 0x21, 0x34, 0xA0, 0x00, 0xFF, 0x3C,
	  0xEF, 0xA0, 0x00, 0x04, 0x38, 0x34, 0x80, 0x08,
	  0x3F, 0x3A, 0x38, 0xEF, 0x21, 0x21, 0x34, 0x80,
	  0x08, 0x3F, 0xEF, 0xA0, 0x00, 0x04, 0x38, 0x34,
	  0xA0, 0x00, 0xFF, 0x3C, 0x3A, 0x38, 0xEF, 0x21,
	  0x21, 0x34, 0x80, 0x08, 0x3F, 0xEF, 0xA0, 0x00,
	  0x04, 0x38, 0x34, 0x80, 0x08, 0x3F, 0x3A, 0xA0,
	  0x08, 0x40, 0x1F, 0x3F, 0x38, 0x3A, 0x40, 0x00,
	  0x03, 0xA0, 0x00, 0x00, 0x62, 0x6C, 0x67, 0xA0,
	  0x08, 0xDF, 0x80, 0x08, 0x37, 0xA0, 0x12, 0xBF,
	  0x80, 0x0A, 0x37, 0xA0, 0x54, 0x9D, 0x80, 0x0C,
	  0x37, 0xA0, 0x01, 0x40, 0x80, 0x22, 0x37, 0xA0,
	  0x01, 0x20, 0x80, 0x24, 0x37, 0xA0, 0xFF, 0x00,
	  0xA0, 0x01, 0x16, 0x35, 0xA0, 0x01, 0x16, 0x34,
	  0xA0, 0x80, 0x00, 0x3E, 0xA0, 0x80, 0x40, 0x2B,
	  0x80, 0x00, 0x08, 0x20, 0x01, 0x18, 0xA0, 0xFF,
	  0x70, 0xA0, 0x01, 0x14, 0x35, 0xA0, 0x01, 0x14,
	  0x34, 0xA0, 0x80, 0x00, 0x3E, 0xA0, 0x80, 0x00,
	  0x2A, 0x80, 0x00, 0x04, 0x80, 0x01, 0x1E, 0xA0,
	  0x00, 0x00, 0x28, 0x20, 0x00, 0xEE, 0xA0, 0x00,
	  0x00, 0xA0, 0x01, 0x12, 0x35, 0xA0, 0x00, 0x00,
	  0xA0, 0x01, 0x10, 0x35, 0xA0, 0x00, 0x00, 0xA0,
	  0x01, 0x0E, 0x35, 0xA0, 0x01, 0x0E, 0x34, 0xA0,
	  0x80, 0x00, 0x3E, 0xA0, 0x80, 0x19, 0x2B, 0x80,
	  0x00, 0x08, 0x20, 0x00, 0x73, 0xA0, 0x84, 0x00,
	  0xA0, 0x01, 0x12, 0x34, 0xA0, 0x01, 0x12, 0x34,
	  0x60, 0xFE, 0xB5, 0xA0, 0x01, 0x0C, 0xB5, 0x22,
	  0xA0, 0x01, 0x10, 0x34, 0xA0, 0x01, 0x10, 0x34,
	  0x60, 0xFE, 0xA5, 0xA0, 0x01, 0x0A, 0xB5, 0x22,
	  0x38, 0xA0, 0x80, 0x00, 0x3E, 0x2B, 0x80, 0x00,
	  0x08, 0x20, 0x00, 0x03, 0x40, 0x00, 0x41, 0xA0,
	  0x01, 0x0C, 0x34, 0xA0, 0x01, 0x0A, 0x34, 0x39,
	  0xA0, 0x01, 0x16, 0x34, 0x80, 0x10, 0x3F, 0x38,
	  0xA0, 0x01, 0x08, 0x35, 0xA0, 0x01, 0x10, 0x34,
	  0xA0, 0x01, 0x12, 0x34, 0x60, 0xFE, 0x71, 0x80,
	  0x10, 0x3F, 0xA0, 0x01, 0x14, 0x34, 0x80, 0x10,
	  0x3F, 0x38, 0xA0, 0x01, 0x10, 0x35, 0xA0, 0x01,
	  0x08, 0x34, 0xA0, 0x01, 0x12, 0x35, 0xA0, 0x01,
	  0x0E, 0xB4, 0x21, 0x24, 0x35, 0x40, 0xFF, 0x7B,
	  0xA0, 0x01, 0x0E, 0x34, 0xA0, 0x01, 0x16, 0x34,
	  0xA0, 0x01, 0x14, 0x34, 0x38, 0xA0, 0x00, 0x01,
	  0x3C, 0x38, 0x80, 0x03, 0x3F, 0xA0, 0x01, 0x08,
	  0x35, 0xA0, 0x01, 0x16, 0x34, 0xA0, 0x01, 0x00,
	  0x38, 0x80, 0x28, 0x37, 0xA0, 0x01, 0x14, 0x34,
	  0xA0, 0x00, 0x90, 0x38, 0x80, 0x2A, 0x37, 0xA0,
	  0x01, 0x08, 0x34, 0x03, 0x80, 0x2E, 0x17, 0xA0,
	  0x00, 0x90, 0xA0, 0x01, 0x14, 0x34, 0x39, 0x80,
	  0x2A, 0x37, 0xA0, 0x01, 0x08, 0x34, 0x03, 0x80,
	  0x2E, 0x17, 0xA0, 0x01, 0x14, 0xB4, 0x21, 0x24,
	  0x35, 0x40, 0xFE, 0xF9, 0xA0, 0x01, 0x16, 0xB4,
	  0x21, 0x24, 0x35, 0x40, 0xFE, 0xD6, 0xA0, 0x00,
	  0x00, 0x62, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
  
  static uint32_t rdaddr;
  rdaddr = (uint32_t)(read_address);
  
  uint8_t rdata = uxn_rom_RAM_SP_RF_1(
	  rdaddr,	// read address
	  0, 		// write value
	  0			// write enable
  );
  
  printf("  ROM read address = 0x%X, read value = 0x%X\n", rdaddr, rdata);

  return rdata;
}