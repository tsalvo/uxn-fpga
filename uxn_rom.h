#pragma once
#include "uintN_t.h"  // uintN_t types for any N
#include <stdint.h>

/* Mandelbrot Fast (assembly)
|0100
  LIT2r 0000 main_ POP2r BRK
( bss )
@tmp_ $2
@yy_ $2
@xx_ $2
@i_ $2
@y_ $2
@x_ $2
@y0_ $2
@x0_ $2
( data )
( text )

@main_ ( -- result* )
	OVR2r #08df #08 DEO2 #12bf #0a DEO2 #549d #0c DEO2 #0190 #22 DEO2 #0168 #24 DEO2 #fee8 ;x0_ STA2

  &begin.1
	;x0_ LDA2 #8000 EOR2 #8078 LTH2 #00 EQU ?&break.1
	#ff4c ;y0_ STA2

  &begin.2
	;y0_ LDA2 #8000 EOR2 #8000 GTH2 #00 SWP #01 EOR #0000 EQU2 ?&break.2
	#0000 ;x_ STA2
	#0000 ;y_ STA2
	#0000 ;i_ STA2

  &begin.3
	;i_ LDA2 #8000 EOR2 #8019 LTH2 #00 EQU ?&break.3
	#8400 ;x_ LDA2 ;x_ LDA2 mul_
	;xx_ STA2k
	POP2 ;y_ LDA2 ;y_ LDA2 mul_
	;yy_ STA2k
	POP2 ADD2 #8000 EOR2 LTH2 #00 EQU ?&end.4
	!&break.3

  &end.4
	;xx_ LDA2 ;yy_ LDA2 SUB2 ;x0_ LDA2 #10 SFT2 ADD2 ;tmp_ STA2
	;y_ LDA2 ;x_ LDA2 mul_
	#10 SFT2 ;y0_ LDA2 #10 SFT2 ADD2 ;y_ STA2
	;tmp_ LDA2 ;x_ STA2

  &continue.3
	;i_ LDA2k INC2 SWP2 STA2
	!&begin.3

  &break.3
	;i_ LDA2 ;x0_ LDA2 ;y0_ LDA2 ADD2 #0001 AND2 ADD2 #03 SFT2 ;tmp_ STA2
	;x0_ LDA2 #0118 ADD2 #28 DEO2 ;y0_ LDA2 #00b4 ADD2 #2a DEO2 ;tmp_ LDA2 NIP #2e DEO #00b4 ;y0_ LDA2 SUB2 #2a DEO2 ;tmp_ LDA2 NIP #2e DEO

  &continue.2
	;y0_ LDA2k INC2 SWP2 STA2
	!&begin.2

  &break.2

  &continue.1
	;x0_ LDA2k INC2 SWP2 STA2
	!&begin.1

  &break.1
	#0000

  &return
	POP2r JMP2r
( Multiply two 8.8 fixed point numbers. )
@mul_ ( y* x* -> x-times-y* )
	LIT2r 0001
	SWP2 DUP2 #8000 LTH2 ?&posx
	#0000 SWP2 SUB2 LIT2r ffff MUL2r &posx
	SWP2 DUP2 #8000 LTH2 ?&posy
	#0000 SWP2 SUB2 LIT2r ffff MUL2r &posy
	( xx yy )
	OVR2k OVR2k
	( xx yy xx yy xx yy xx yy )
	#00ff AND2 SWP2 #00ff AND2 MUL2 #08 SFT2
	( xx yy xx yy xx yy AA )
	ROT2 #08 SFT2 ROT2 #00ff AND2 MUL2 ADD2
	( xx yy xx yy AA+BB )
	ROT2 #00ff AND2 ROT2 #08 SFT2 MUL2 ADD2
	( xx yy AA+BB+CC )
	ROT2 #08 SFT2 ROT2 #08 SFT2 MUL2 #80 SFT2 ADD2
	( AA+BB+CC+DD )
	STH2r MUL2
	JMP2r

*/
uint8_t read_rom_byte(uint16_t read_address)
{
	static uint8_t uxn_rom[512] = {
		0xE0, 0x00, 0x00, 0x60, 0x00, 0x12, 0x62, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x67, 0xA0, 0x08, 0xDF, 0x80, 0x08, 0x37, 0xA0,
		0x12, 0xBF, 0x80, 0x0A, 0x37, 0xA0, 0x54, 0x9D,
		0x80, 0x0C, 0x37, 0xA0, 0x01, 0x90, 0x80, 0x22,
		0x37, 0xA0, 0x01, 0x68, 0x80, 0x24, 0x37, 0xA0,
		0xFE, 0xE8, 0xA0, 0x01, 0x16, 0x35, 0xA0, 0x01,
		0x16, 0x34, 0xA0, 0x80, 0x00, 0x3E, 0xA0, 0x80,
		0x78, 0x2B, 0x80, 0x00, 0x08, 0x20, 0x01, 0x18,
		0xA0, 0xFF, 0x4C, 0xA0, 0x01, 0x14, 0x35, 0xA0,
		0x01, 0x14, 0x34, 0xA0, 0x80, 0x00, 0x3E, 0xA0,
		0x80, 0x00, 0x2A, 0x80, 0x00, 0x04, 0x80, 0x01,
		0x1E, 0xA0, 0x00, 0x00, 0x28, 0x20, 0x00, 0xEE,
		0xA0, 0x00, 0x00, 0xA0, 0x01, 0x12, 0x35, 0xA0,
		0x00, 0x00, 0xA0, 0x01, 0x10, 0x35, 0xA0, 0x00,
		0x00, 0xA0, 0x01, 0x0E, 0x35, 0xA0, 0x01, 0x0E,
		0x34, 0xA0, 0x80, 0x00, 0x3E, 0xA0, 0x80, 0x19,
		0x2B, 0x80, 0x00, 0x08, 0x20, 0x00, 0x73, 0xA0,
		0x84, 0x00, 0xA0, 0x01, 0x12, 0x34, 0xA0, 0x01,
		0x12, 0x34, 0x60, 0x00, 0xC8, 0xA0, 0x01, 0x0C,
		0xB5, 0x22, 0xA0, 0x01, 0x10, 0x34, 0xA0, 0x01,
		0x10, 0x34, 0x60, 0x00, 0xB8, 0xA0, 0x01, 0x0A,
		0xB5, 0x22, 0x38, 0xA0, 0x80, 0x00, 0x3E, 0x2B,
		0x80, 0x00, 0x08, 0x20, 0x00, 0x03, 0x40, 0x00,
		0x41, 0xA0, 0x01, 0x0C, 0x34, 0xA0, 0x01, 0x0A,
		0x34, 0x39, 0xA0, 0x01, 0x16, 0x34, 0x80, 0x10,
		0x3F, 0x38, 0xA0, 0x01, 0x08, 0x35, 0xA0, 0x01,
		0x10, 0x34, 0xA0, 0x01, 0x12, 0x34, 0x60, 0x00,
		0x84, 0x80, 0x10, 0x3F, 0xA0, 0x01, 0x14, 0x34,
		0x80, 0x10, 0x3F, 0x38, 0xA0, 0x01, 0x10, 0x35,
		0xA0, 0x01, 0x08, 0x34, 0xA0, 0x01, 0x12, 0x35,
		0xA0, 0x01, 0x0E, 0xB4, 0x21, 0x24, 0x35, 0x40,
		0xFF, 0x7B, 0xA0, 0x01, 0x0E, 0x34, 0xA0, 0x01,
		0x16, 0x34, 0xA0, 0x01, 0x14, 0x34, 0x38, 0xA0,
		0x00, 0x01, 0x3C, 0x38, 0x80, 0x03, 0x3F, 0xA0,
		0x01, 0x08, 0x35, 0xA0, 0x01, 0x16, 0x34, 0xA0,
		0x01, 0x18, 0x38, 0x80, 0x28, 0x37, 0xA0, 0x01,
		0x14, 0x34, 0xA0, 0x00, 0xB4, 0x38, 0x80, 0x2A,
		0x37, 0xA0, 0x01, 0x08, 0x34, 0x03, 0x80, 0x2E,
		0x17, 0xA0, 0x00, 0xB4, 0xA0, 0x01, 0x14, 0x34,
		0x39, 0x80, 0x2A, 0x37, 0xA0, 0x01, 0x08, 0x34,
		0x03, 0x80, 0x2E, 0x17, 0xA0, 0x01, 0x14, 0xB4,
		0x21, 0x24, 0x35, 0x40, 0xFE, 0xF9, 0xA0, 0x01,
		0x16, 0xB4, 0x21, 0x24, 0x35, 0x40, 0xFE, 0xD6,
		0xA0, 0x00, 0x00, 0x62, 0x6C, 0xE0, 0x00, 0x01,
		0x24, 0x26, 0xA0, 0x80, 0x00, 0x2B, 0x20, 0x00,
		0x09, 0xA0, 0x00, 0x00, 0x24, 0x39, 0xE0, 0xFF,
		0xFF, 0x7A, 0x24, 0x26, 0xA0, 0x80, 0x00, 0x2B,
		0x20, 0x00, 0x09, 0xA0, 0x00, 0x00, 0x24, 0x39,
		0xE0, 0xFF, 0xFF, 0x7A, 0xA7, 0xA7, 0xA0, 0x00,
		0xFF, 0x3C, 0x24, 0xA0, 0x00, 0xFF, 0x3C, 0x3A,
		0x80, 0x08, 0x3F, 0x25, 0x80, 0x08, 0x3F, 0x25,
		0xA0, 0x00, 0xFF, 0x3C, 0x3A, 0x38, 0x25, 0xA0,
		0x00, 0xFF, 0x3C, 0x25, 0x80, 0x08, 0x3F, 0x3A,
		0x38, 0x25, 0x80, 0x08, 0x3F, 0x25, 0x80, 0x08,
		0x3F, 0x3A, 0x80, 0x80, 0x3F, 0x38, 0x6F, 0x3A,
		0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
  
  static uint32_t rdaddr;
  rdaddr = (uint32_t)(read_address);
  
  uint8_t rdata = uxn_rom_RAM_SP_RF_1(
	  rdaddr,	// read address
	  0, 		// write value
	  0			// write enable
  );
  
  printf("  ROM read address = 0x%X, read value = 0x%X\n", rdaddr, rdata);

  return rdata;
}