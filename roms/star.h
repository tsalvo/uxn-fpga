#pragma once
#include "uintN_t.h"  // uintN_t types for any N

// star demo for chibicc-uxn by hikari_no_yume (2023-06-10 ~ 2023-06-14)

/* STAR (assembly)
	|0100
	  ;L.screen.hook #20 DEO2
	  LIT2r 0000 main_ POP2r BRK
	  @L.screen.hook LIT2r 0000 on_screen_ POP2 POP2r BRK
	( bss )
	( data )
	@t_
	  00
	@SPRITE_
	  81 81 81 81 81 81 81 7f
	@SIN_TABLE_
	  00 03 06 09 0c 0f 12 15 18 1c 1f 22 25 28 2b 2e
	  30 33 36 39 3c 3f 41 44 47 49 4c 4e 51 53 55 58
	  5a 5c 5e 60 62 64 66 68 6a 6c 6d 6f 70 72 73 75
	  76 77 78 79 7a 7b 7c 7c 7d 7e 7e 7f 7f 7f 7f 7f
	
	( text )
	@sext
	  #80 ANDk EQU #ff MUL SWP JMP2r
	@ashr
	  SWP2
	  #8000 AND2k EQU2 #ff MUL DUP
	  DUP2 ROT2 EOR2 ROT2
	  NIP #0f AND SFT2
	  EOR2
	  JMP2r
	
	@sin_ ( a* -- result* )
		OVR2r LIT2r 0002 SUB2r STH2kr STA
		POP ;SIN_TABLE_ LDAkr STHr #40 AND ?&then.1
		LDAkr STHr sext
		!&end.1
	
	  &then.1
		LDAkr STHr sext
		#ffff EOR2
	
	  &end.1
		#003f AND2 ADD2 LDA sext
		LDAkr STHr #80 AND ?&then.2
		#0001 !&end.2
	
	  &then.2
		#ffff
	
	  &end.2
		MUL2 !&return
		#0000
	
	  &return
		NIP sext
		POP2r JMP2r
	
	@cos_ ( a* -- result* )
		OVR2r LIT2r 0002 SUB2r STH2kr STA
		POP LDAkr STHr sext
		#0040 ADD2 sin_
		!&return
		#0000
	
	  &return
		NIP sext
		POP2r JMP2r
	
	@line_low_ ( pixel* y1* x1* y0* x0* -- result* )
		OVR2r LIT2r 0016 SUB2r STH2kr #0014 ADD2 STA2
		STH2kr #0012 ADD2 STA2
		STH2kr #0010 ADD2 STA2
		STH2kr #000e ADD2 STA2
		STH2kr #000c ADD2 STA
		POP STH2kr #0010 ADD2 LDA2 STH2kr #0014 ADD2 LDA2 SUB2 STH2kr #000a ADD2 STA2
		STH2kr #000e ADD2 LDA2 STH2kr #0012 ADD2 LDA2 SUB2 STH2kr #0008 ADD2 STA2
		#0001 STH2kr #0006 ADD2 STA2
		STH2kr #0008 ADD2 LDA2 #8000 EOR2 #8000 LTH2 #00 EQU ?&end.1
		#ffff STH2kr #0006 ADD2 STA2
		#0000 STH2kr #0008 ADD2 LDA2 SUB2 STH2kr #0008 ADD2 STA2
	
	  &end.1
		STH2kr #0008 ADD2 LDA2 #10 SFT2 STH2kr #000a ADD2 LDA2 SUB2 STH2kr #0004 ADD2 STA2
		STH2kr #0012 ADD2 LDA2 STH2kr INC2 INC2 STA2
		STH2kr #0014 ADD2 LDA2 STH2kr STA2
	
	  &begin.2
		STH2kr LDA2 #8000 EOR2 STH2kr #0010 ADD2 LDA2 #8000 EOR2 GTH2 #00 SWP #01 EOR #0000 EQU2 ?&break.2
		STH2kr LDA2 #28 DEO2 STH2kr INC2 INC2 LDA2 #2a DEO2 STH2kr #000c ADD2 LDA #2e DEO #8000 STH2kr #0004 ADD2 LDA2 #8000 EOR2 LTH2 ?&then.3
		STH2kr #0004 ADD2 LDA2k STH2kr #0008 ADD2 LDA2 #10 SFT2 ADD2 SWP2 STA2
		!&end.3
	
	  &then.3
		STH2kr INC2 INC2 LDA2k STH2kr #0006 ADD2 LDA2 ADD2 SWP2 STA2
		STH2kr #0004 ADD2 LDA2k STH2kr #0008 ADD2 LDA2 STH2kr #000a ADD2 LDA2 SUB2 #10 SFT2 ADD2 SWP2 STA2
	
	  &end.3
	
	  &continue.2
		STH2kr LDA2k INC2k ROT2 STA2
		POP2 !&begin.2
	
	  &break.2
		#0000
	
	  &return
		POP2r JMP2r
	
	@line_high_ ( pixel* y1* x1* y0* x0* -- result* )
		OVR2r LIT2r 0016 SUB2r STH2kr #0014 ADD2 STA2
		STH2kr #0012 ADD2 STA2
		STH2kr #0010 ADD2 STA2
		STH2kr #000e ADD2 STA2
		STH2kr #000c ADD2 STA
		POP STH2kr #0010 ADD2 LDA2 STH2kr #0014 ADD2 LDA2 SUB2 STH2kr #000a ADD2 STA2
		STH2kr #000e ADD2 LDA2 STH2kr #0012 ADD2 LDA2 SUB2 STH2kr #0008 ADD2 STA2
		#0001 STH2kr #0006 ADD2 STA2
		STH2kr #000a ADD2 LDA2 #8000 EOR2 #8000 LTH2 #00 EQU ?&end.1
		#ffff STH2kr #0006 ADD2 STA2
		#0000 STH2kr #000a ADD2 LDA2 SUB2 STH2kr #000a ADD2 STA2
	
	  &end.1
		STH2kr #000a ADD2 LDA2 #10 SFT2 STH2kr #0008 ADD2 LDA2 SUB2 STH2kr #0004 ADD2 STA2
		STH2kr #0014 ADD2 LDA2 STH2kr INC2 INC2 STA2
		STH2kr #0012 ADD2 LDA2 STH2kr STA2
	
	  &begin.2
		STH2kr LDA2 #8000 EOR2 STH2kr #000e ADD2 LDA2 #8000 EOR2 GTH2 #00 SWP #01 EOR #0000 EQU2 ?&break.2
		STH2kr INC2 INC2 LDA2 #28 DEO2 STH2kr LDA2 #2a DEO2 STH2kr #000c ADD2 LDA #2e DEO #8000 STH2kr #0004 ADD2 LDA2 #8000 EOR2 LTH2 ?&then.3
		STH2kr #0004 ADD2 LDA2k STH2kr #000a ADD2 LDA2 #10 SFT2 ADD2 SWP2 STA2
		!&end.3
	
	  &then.3
		STH2kr INC2 INC2 LDA2k STH2kr #0006 ADD2 LDA2 ADD2 SWP2 STA2
		STH2kr #0004 ADD2 LDA2k STH2kr #000a ADD2 LDA2 STH2kr #0008 ADD2 LDA2 SUB2 #10 SFT2 ADD2 SWP2 STA2
	
	  &end.3
	
	  &continue.2
		STH2kr LDA2k INC2k ROT2 STA2
		POP2 !&begin.2
	
	  &break.2
		#0000
	
	  &return
		POP2r JMP2r
	
	@line_ ( pixel* y1* x1* y0* x0* -- result* )
		OVR2r LIT2r 000e SUB2r STH2kr #000c ADD2 STA2
		STH2kr #000a ADD2 STA2
		STH2kr #0008 ADD2 STA2
		STH2kr #0006 ADD2 STA2
		STH2kr #0004 ADD2 STA
		POP STH2kr #0006 ADD2 LDA2 STH2kr #000a ADD2 LDA2 SUB2 STH2kr INC2 INC2 STA2
		STH2kr INC2 INC2 LDA2 #8000 EOR2 #8000 LTH2 #00 EQU ?&end.1
		#0000 STH2kr INC2 INC2 LDA2 SUB2 STH2kr INC2 INC2 STA2
	
	  &end.1
		STH2kr #0008 ADD2 LDA2 STH2kr #000c ADD2 LDA2 SUB2 STH2kr STA2
		STH2kr LDA2 #8000 EOR2 #8000 LTH2 #00 EQU ?&end.2
		#0000 STH2kr LDA2 SUB2 STH2kr STA2
	
	  &end.2
		STH2kr INC2 INC2 LDA2 #8000 EOR2 STH2kr LDA2 #8000 EOR2 LTH2 ?&then.3
		STH2kr #0006 ADD2 LDA2 #8000 EOR2 STH2kr #000a ADD2 LDA2 #8000 EOR2 LTH2 ?&then.4
		STH2kr #0004 ADD2 LDA sext
		STH2kr #0006 ADD2 LDA2 STH2kr #0008 ADD2 LDA2 STH2kr #000a ADD2 LDA2 STH2kr #000c ADD2 LDA2 line_high_
		POP2 !&end.4
	
	  &then.4
		STH2kr #0004 ADD2 LDA sext
		STH2kr #000a ADD2 LDA2 STH2kr #000c ADD2 LDA2 STH2kr #0006 ADD2 LDA2 STH2kr #0008 ADD2 LDA2 line_high_
		POP2
	
	  &end.4
		!&end.3
	
	  &then.3
		STH2kr #0008 ADD2 LDA2 #8000 EOR2 STH2kr #000c ADD2 LDA2 #8000 EOR2 LTH2 ?&then.5
		STH2kr #0004 ADD2 LDA sext
		STH2kr #0006 ADD2 LDA2 STH2kr #0008 ADD2 LDA2 STH2kr #000a ADD2 LDA2 STH2kr #000c ADD2 LDA2 line_low_
		POP2 !&end.5
	
	  &then.5
		STH2kr #0004 ADD2 LDA sext
		STH2kr #000a ADD2 LDA2 STH2kr #000c ADD2 LDA2 STH2kr #0006 ADD2 LDA2 STH2kr #0008 ADD2 LDA2 line_low_
		POP2
	
	  &end.5
	
	  &end.3
		#0000
	
	  &return
		POP2r JMP2r
	
	@on_screen_ ( -- result* )
		OVR2r LIT2r 0012 SUB2r ;t_ LDAk sext
		INC2k ROT2 STA
		POP POP2 #0000 #28 DEO2 #0000 #2a DEO2 #802e DEO #0100 SWP STH2kr #0010 ADD2 STA
		POP #0000 STH2kr #000a ADD2 STA2
	
	  &begin.1
		STH2kr #000a ADD2 LDA2 #000b LTH2 #00 EQU ?&break.1
		;t_ LDA sext
		STH2kr #000a ADD2 LDA2 #000a OVR2 OVR2 DIV2 MUL2 SUB2 #80 SFT2 #000a DIV2 ADD2 STH2kr #0008 ADD2 STA
		POP STH2kr #0008 ADD2 LDA #00 SWP sin_
		STH2kr #000a ADD2 LDA2 #0001 AND2 ashr
		STH2kr #0006 ADD2 STA2
		STH2kr #0008 ADD2 LDA #00 SWP cos_
		STH2kr #000a ADD2 LDA2 #0001 AND2 ashr
		STH2kr #0004 ADD2 STA2
		STH2kr #0010 ADD2 LDA ?&then.2
		#0003 STH2kr #0004 ADD2 LDA2 #00b3 ADD2 STH2kr #0006 ADD2 LDA2 #00c7 ADD2 STH2kr #000c ADD2 LDA2 #00b3 ADD2 STH2kr #000e ADD2 LDA2 #00c7 ADD2 line_
		POP2 #0002 STH2kr #0004 ADD2 LDA2 #0003 MUL2 #0002 ashr
		#00b3 ADD2 STH2kr #0006 ADD2 LDA2 #0003 MUL2 #0002 ashr
		#00c7 ADD2 STH2kr #000c ADD2 LDA2 #0003 MUL2 #0002 ashr
		#00b3 ADD2 STH2kr #000e ADD2 LDA2 #0003 MUL2 #0002 ashr
		#00c7 ADD2 line_
		POP2 #0001 STH2kr #0004 ADD2 LDA2 #0001 ashr
		#00b3 ADD2 STH2kr #0006 ADD2 LDA2 #0001 ashr
		#00c7 ADD2 STH2kr #000c ADD2 LDA2 #0001 ashr
		#00b3 ADD2 STH2kr #000e ADD2 LDA2 #0001 ashr
		#00c7 ADD2 line_
		POP2 !&end.2
	
	  &then.2
		#0000 SWP STH2kr #0010 ADD2 STA
		POP
	
	  &end.2
		STH2kr #0006 ADD2 LDA2 STH2kr #000e ADD2 STA2
		STH2kr #0004 ADD2 LDA2 STH2kr #000c ADD2 STA2
	
	  &continue.1
		STH2kr #000a ADD2 LDA2k INC2k ROT2 STA2
		POP2 !&begin.1
	
	  &break.1
		;SPRITE_ #2c DEO2 #00b9 #28 DEO2 #00af #2a DEO2 #012f DEO ;t_ LDA sext
		#0020 ADD2 sin_
		#0005 ashr
		STH2kr INC2 INC2 STA2
		;t_ LDA sext
		#0020 ADD2 cos_
		#0005 ashr
		STH2kr STA2
		#0003 STH2kr LDA2 #00b3 ADD2 STH2kr INC2 INC2 LDA2 #00c7 ADD2 #00b3 STH2kr LDA2 SUB2 #0001 SUB2 #00c7 STH2kr INC2 INC2 LDA2 SUB2 #0001 SUB2 line_
		POP2 ;t_ LDA sext
		#0060 ADD2 sin_
		#0005 ashr
		STH2kr INC2 INC2 STA2
		;t_ LDA sext
		#0060 ADD2 cos_
		#0005 ashr
		STH2kr STA2
		#0003 STH2kr LDA2 #00b3 ADD2 STH2kr INC2 INC2 LDA2 #00c7 ADD2 #00b3 STH2kr LDA2 SUB2 #0001 SUB2 #00c7 STH2kr INC2 INC2 LDA2 SUB2 #0001 SUB2 line_
		POP2 ;SPRITE_ #2c DEO2 #00cd #28 DEO2 #00af #2a DEO2 #312f DEO #0000
	
	  &return
		POP2r JMP2r
	
	@main_ ( -- result* )
		OVR2r #0aaf #08 DEO2 #0ffc #0a DEO2 #0faa #0c DEO2 #0190 #22 DEO2 #0168 #24 DEO2 #0000
	
	  &return
		POP2r JMP2r
*/

/* STAR.C
// star demo for chibicc-uxn by hikari_no_yume (2023-06-10 ~ 2023-06-14)

#include <varvara.h>

// generated with JS: x="";for(i=0;i<64;i++)x+=((Math.sin(i*Math.PI/128)*128)|0)+",";
char SIN_TABLE[64] = {0,3,6,9,12,15,18,21,24,28,31,34,37,40,43,46,48,51,54,57,60,63,65,68,71,73,76,78,81,83,85,88,90,92,94,96,98,100,102,104,106,108,109,111,112,114,115,117,118,119,120,121,122,123,124,124,125,126,126,127,127,127,127,127,};
char sin(char a)
{
  return SIN_TABLE[(a & 0x40 ? ~a : a) & 0x3f] * (a & 0x80 ? -1 : 1);
}
char cos(char a)
{
  return sin(a + 0x40);
}

// https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm#All_cases
void line_low(int x0, int y0, int x1, int y1, char pixel)
{
  int dx = x1 - x0;
  int dy = y1 - y0;
  int yi = 1;
  if (dy < 0) {
	yi = -1;
	dy = -dy;
  }
  int d = (2 * dy) - dx;
  int y = y0;
  for (int x = x0; x <= x1; x++) {
	set_screen_xy(x, y);
	draw_pixel(pixel);
	if (d > 0) {
	  y += yi;
	  d += 2 * (dy - dx);
	} else {
	  d += 2 * dy;
	}
  }
}
void line_high(int x0, int y0, int x1, int y1, char pixel)
{
  int dx = x1 - x0;
  int dy = y1 - y0;
  int xi = 1;
  if (dx < 0) {
	xi = -1;
	dx = -dx;
  }
  int d = (2 * dx) - dy;
  int x = x0;
  for (int y = y0; y <= y1; y++) {
	set_screen_xy(x, y);
	draw_pixel(pixel);
	if (d > 0) {
	  x += xi;
	  d += 2 * (dx - dy);
	} else {
	  d += 2 * dx;
	}
  }
}
void line(int x0, int y0, int x1, int y1, char pixel)
{
  int y1y0 = y1 - y0;
  if (y1y0 < 0) y1y0 = -y1y0;
  int x1x0 = x1 - x0;
  if (x1x0 < 0) x1x0 = -x1x0;
  if (y1y0 < x1x0) {
	if (x0 > x1)
	  line_low(x1, y1, x0, y0, pixel);
	else
	  line_low(x0, y0, x1, y1, pixel);
  } else {
	if (y0 > y1)
	  line_high(x1, y1, x0, y0, pixel);
	else
	  line_high(x0, y0, x1, y1, pixel);
  }
}

char SPRITE[8] = {
  0b10000001,
  0b10000001,
  0b10000001,
  0b10000001,
  0b10000001,
  0b10000001,
  0b10000001,
  0b01111111,
};

char t = 0;

void on_screen(void)
{
  t++;

  // clear layer 0
  set_screen_xy(0, 0);
  draw_pixel(BgFillBR);
  // draw star
  _Bool first = 1;
  int last_x;
  int last_y;
  for (unsigned i = 0; i < 11; i++) {
	unsigned char angle = t + (256 * (i % 10)) / 10;
	int x = sin(angle) >> (i & 1);
	int y = cos(angle) >> (i & 1);
	if (first) {
	  first = 0;
	} else {
	  line(199 + last_x, 179 + last_y, 199 + x, 179 + y, 0x03);
	  line(199 + (last_x * 3 >> 2), 179 + (last_y * 3 >> 2), 199 + (x * 3 >> 2), 179 + (y * 3 >> 2), 0x02);
	  line(199 + (last_x >> 1), 179 + (last_y >> 1), 199 + (x >> 1), 179 + (y >> 1), 0x01);
	}
	last_x = x;
	last_y = y;
  }
  // draw u
  set_screen_addr(SPRITE);
  set_screen_xy(185, 175);
  draw_sprite(0x01);
  // draw x
  int x = sin(t + 0x20) >> 5;
  int y = cos(t + 0x20) >> 5;
  line(199 - x - 1, 179 - y - 1, 199 + x, 179 + y, 0x03);
  x = sin(t + 0x60) >> 5;
  y = cos(t + 0x60) >> 5;
  line(199 - x - 1, 179 - y - 1, 199 + x, 179 + y, 0x03);
  // draw n
  set_screen_addr(SPRITE);
  set_screen_xy(205, 175);
  draw_sprite(0x31);
}

void main(void)
{
  set_palette(0x0aaf, 0x0ffc, 0x0faa);
  set_screen_size(400, 360);
}

*/

#define ROM_SIZE 2048

uint8_t read_rom_byte(uint16_t read_address)
{
	static uint8_t uxn_rom[ROM_SIZE] = {
		0xA0, 0x01, 0x0E, 0x80,
		0x20, 0x37, 0xE0, 0x00,
		0x00, 0x60, 0x07, 0x38,
		0x62, 0x00, 0xE0, 0x00,
		0x00, 0x60, 0x04, 0x9D,
		0x22, 0x62, 0x00, 0x00,
		0x81, 0x81, 0x81, 0x81,
		0x81, 0x81, 0x81, 0x7F,
		0x00, 0x03, 0x06, 0x09,
		0x0C, 0x0F, 0x12, 0x15,
		0x18, 0x1C, 0x1F, 0x22,
		0x25, 0x28, 0x2B, 0x2E,
		0x30, 0x33, 0x36, 0x39,
		0x3C, 0x3F, 0x41, 0x44,
		0x47, 0x49, 0x4C, 0x4E,
		0x51, 0x53, 0x55, 0x58,
		0x5A, 0x5C, 0x5E, 0x60,
		0x62, 0x64, 0x66, 0x68,
		0x6A, 0x6C, 0x6D, 0x6F,
		0x70, 0x72, 0x73, 0x75,
		0x76, 0x77, 0x78, 0x79,
		0x7A, 0x7B, 0x7C, 0x7C,
		0x7D, 0x7E, 0x7E, 0x7F,
		0x7F, 0x7F, 0x7F, 0x7F,
		0x80, 0x80, 0x9C, 0x08,
		0x80, 0xFF, 0x1A, 0x04,
		0x6C, 0x24, 0xA0, 0x80,
		0x00, 0xBC, 0x28, 0x80,
		0xFF, 0x1A, 0x06, 0x26,
		0x25, 0x3E, 0x25, 0x03,
		0x80, 0x0F, 0x1C, 0x3F,
		0x3E, 0x6C, 0x67, 0xE0,
		0x00, 0x02, 0x79, 0xEF,
		0x15, 0x02, 0xA0, 0x01,
		0x20, 0xD4, 0x4F, 0x80,
		0x40, 0x1C, 0x20, 0x00,
		0x08, 0xD4, 0x4F, 0x60,
		0xFF, 0xCA, 0x40, 0x00,
		0x09, 0xD4, 0x4F, 0x60,
		0xFF, 0xC2, 0xA0, 0xFF,
		0xFF, 0x3E, 0xA0, 0x00,
		0x3F, 0x3C, 0x38, 0x14,
		0x60, 0xFF, 0xB5, 0xD4,
		0x4F, 0x80, 0x80, 0x1C,
		0x20, 0x00, 0x06, 0xA0,
		0x00, 0x01, 0x40, 0x00,
		0x03, 0xA0, 0xFF, 0xFF,
		0x3A, 0x40, 0x00, 0x03,
		0xA0, 0x00, 0x00, 0x03,
		0x60, 0xFF, 0x99, 0x62,
		0x6C, 0x67, 0xE0, 0x00,
		0x02, 0x79, 0xEF, 0x15,
		0x02, 0xD4, 0x4F, 0x60,
		0xFF, 0x8A, 0xA0, 0x00,
		0x40, 0x38, 0x60, 0xFF,
		0xA1, 0x40, 0x00, 0x03,
		0xA0, 0x00, 0x00, 0x03,
		0x60, 0xFF, 0x79, 0x62,
		0x6C, 0x67, 0xE0, 0x00,
		0x16, 0x79, 0xEF, 0xA0,
		0x00, 0x14, 0x38, 0x35,
		0xEF, 0xA0, 0x00, 0x12,
		0x38, 0x35, 0xEF, 0xA0,
		0x00, 0x10, 0x38, 0x35,
		0xEF, 0xA0, 0x00, 0x0E,
		0x38, 0x35, 0xEF, 0xA0,
		0x00, 0x0C, 0x38, 0x15,
		0x02, 0xEF, 0xA0, 0x00,
		0x10, 0x38, 0x34, 0xEF,
		0xA0, 0x00, 0x14, 0x38,
		0x34, 0x39, 0xEF, 0xA0,
		0x00, 0x0A, 0x38, 0x35,
		0xEF, 0xA0, 0x00, 0x0E,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x12, 0x38, 0x34,
		0x39, 0xEF, 0xA0, 0x00,
		0x08, 0x38, 0x35, 0xA0,
		0x00, 0x01, 0xEF, 0xA0,
		0x00, 0x06, 0x38, 0x35,
		0xEF, 0xA0, 0x00, 0x08,
		0x38, 0x34, 0xA0, 0x80,
		0x00, 0x3E, 0xA0, 0x80,
		0x00, 0x2B, 0x80, 0x00,
		0x08, 0x20, 0x00, 0x19,
		0xA0, 0xFF, 0xFF, 0xEF,
		0xA0, 0x00, 0x06, 0x38,
		0x35, 0xA0, 0x00, 0x00,
		0xEF, 0xA0, 0x00, 0x08,
		0x38, 0x34, 0x39, 0xEF,
		0xA0, 0x00, 0x08, 0x38,
		0x35, 0xEF, 0xA0, 0x00,
		0x08, 0x38, 0x34, 0x80,
		0x10, 0x3F, 0xEF, 0xA0,
		0x00, 0x0A, 0x38, 0x34,
		0x39, 0xEF, 0xA0, 0x00,
		0x04, 0x38, 0x35, 0xEF,
		0xA0, 0x00, 0x12, 0x38,
		0x34, 0xEF, 0x21, 0x21,
		0x35, 0xEF, 0xA0, 0x00,
		0x14, 0x38, 0x34, 0xEF,
		0x35, 0xEF, 0x34, 0xA0,
		0x80, 0x00, 0x3E, 0xEF,
		0xA0, 0x00, 0x10, 0x38,
		0x34, 0xA0, 0x80, 0x00,
		0x3E, 0x2A, 0x80, 0x00,
		0x04, 0x80, 0x01, 0x1E,
		0xA0, 0x00, 0x00, 0x28,
		0x20, 0x00, 0x6A, 0xEF,
		0x34, 0x80, 0x28, 0x37,
		0xEF, 0x21, 0x21, 0x34,
		0x80, 0x2A, 0x37, 0xEF,
		0xA0, 0x00, 0x0C, 0x38,
		0x14, 0x80, 0x2E, 0x17,
		0xA0, 0x80, 0x00, 0xEF,
		0xA0, 0x00, 0x04, 0x38,
		0x34, 0xA0, 0x80, 0x00,
		0x3E, 0x2B, 0x20, 0x00,
		0x15, 0xEF, 0xA0, 0x00,
		0x04, 0x38, 0xB4, 0xEF,
		0xA0, 0x00, 0x08, 0x38,
		0x34, 0x80, 0x10, 0x3F,
		0x38, 0x24, 0x35, 0x40,
		0x00, 0x26, 0xEF, 0x21,
		0x21, 0xB4, 0xEF, 0xA0,
		0x00, 0x06, 0x38, 0x34,
		0x38, 0x24, 0x35, 0xEF,
		0xA0, 0x00, 0x04, 0x38,
		0xB4, 0xEF, 0xA0, 0x00,
		0x08, 0x38, 0x34, 0xEF,
		0xA0, 0x00, 0x0A, 0x38,
		0x34, 0x39, 0x80, 0x10,
		0x3F, 0x38, 0x24, 0x35,
		0xEF, 0xB4, 0xA1, 0x25,
		0x35, 0x22, 0x40, 0xFF,
		0x78, 0xA0, 0x00, 0x00,
		0x62, 0x6C, 0x67, 0xE0,
		0x00, 0x16, 0x79, 0xEF,
		0xA0, 0x00, 0x14, 0x38,
		0x35, 0xEF, 0xA0, 0x00,
		0x12, 0x38, 0x35, 0xEF,
		0xA0, 0x00, 0x10, 0x38,
		0x35, 0xEF, 0xA0, 0x00,
		0x0E, 0x38, 0x35, 0xEF,
		0xA0, 0x00, 0x0C, 0x38,
		0x15, 0x02, 0xEF, 0xA0,
		0x00, 0x10, 0x38, 0x34,
		0xEF, 0xA0, 0x00, 0x14,
		0x38, 0x34, 0x39, 0xEF,
		0xA0, 0x00, 0x0A, 0x38,
		0x35, 0xEF, 0xA0, 0x00,
		0x0E, 0x38, 0x34, 0xEF,
		0xA0, 0x00, 0x12, 0x38,
		0x34, 0x39, 0xEF, 0xA0,
		0x00, 0x08, 0x38, 0x35,
		0xA0, 0x00, 0x01, 0xEF,
		0xA0, 0x00, 0x06, 0x38,
		0x35, 0xEF, 0xA0, 0x00,
		0x0A, 0x38, 0x34, 0xA0,
		0x80, 0x00, 0x3E, 0xA0,
		0x80, 0x00, 0x2B, 0x80,
		0x00, 0x08, 0x20, 0x00,
		0x19, 0xA0, 0xFF, 0xFF,
		0xEF, 0xA0, 0x00, 0x06,
		0x38, 0x35, 0xA0, 0x00,
		0x00, 0xEF, 0xA0, 0x00,
		0x0A, 0x38, 0x34, 0x39,
		0xEF, 0xA0, 0x00, 0x0A,
		0x38, 0x35, 0xEF, 0xA0,
		0x00, 0x0A, 0x38, 0x34,
		0x80, 0x10, 0x3F, 0xEF,
		0xA0, 0x00, 0x08, 0x38,
		0x34, 0x39, 0xEF, 0xA0,
		0x00, 0x04, 0x38, 0x35,
		0xEF, 0xA0, 0x00, 0x14,
		0x38, 0x34, 0xEF, 0x21,
		0x21, 0x35, 0xEF, 0xA0,
		0x00, 0x12, 0x38, 0x34,
		0xEF, 0x35, 0xEF, 0x34,
		0xA0, 0x80, 0x00, 0x3E,
		0xEF, 0xA0, 0x00, 0x0E,
		0x38, 0x34, 0xA0, 0x80,
		0x00, 0x3E, 0x2A, 0x80,
		0x00, 0x04, 0x80, 0x01,
		0x1E, 0xA0, 0x00, 0x00,
		0x28, 0x20, 0x00, 0x6A,
		0xEF, 0x21, 0x21, 0x34,
		0x80, 0x28, 0x37, 0xEF,
		0x34, 0x80, 0x2A, 0x37,
		0xEF, 0xA0, 0x00, 0x0C,
		0x38, 0x14, 0x80, 0x2E,
		0x17, 0xA0, 0x80, 0x00,
		0xEF, 0xA0, 0x00, 0x04,
		0x38, 0x34, 0xA0, 0x80,
		0x00, 0x3E, 0x2B, 0x20,
		0x00, 0x15, 0xEF, 0xA0,
		0x00, 0x04, 0x38, 0xB4,
		0xEF, 0xA0, 0x00, 0x0A,
		0x38, 0x34, 0x80, 0x10,
		0x3F, 0x38, 0x24, 0x35,
		0x40, 0x00, 0x26, 0xEF,
		0x21, 0x21, 0xB4, 0xEF,
		0xA0, 0x00, 0x06, 0x38,
		0x34, 0x38, 0x24, 0x35,
		0xEF, 0xA0, 0x00, 0x04,
		0x38, 0xB4, 0xEF, 0xA0,
		0x00, 0x0A, 0x38, 0x34,
		0xEF, 0xA0, 0x00, 0x08,
		0x38, 0x34, 0x39, 0x80,
		0x10, 0x3F, 0x38, 0x24,
		0x35, 0xEF, 0xB4, 0xA1,
		0x25, 0x35, 0x22, 0x40,
		0xFF, 0x78, 0xA0, 0x00,
		0x00, 0x62, 0x6C, 0x67,
		0xE0, 0x00, 0x0E, 0x79,
		0xEF, 0xA0, 0x00, 0x0C,
		0x38, 0x35, 0xEF, 0xA0,
		0x00, 0x0A, 0x38, 0x35,
		0xEF, 0xA0, 0x00, 0x08,
		0x38, 0x35, 0xEF, 0xA0,
		0x00, 0x06, 0x38, 0x35,
		0xEF, 0xA0, 0x00, 0x04,
		0x38, 0x15, 0x02, 0xEF,
		0xA0, 0x00, 0x06, 0x38,
		0x34, 0xEF, 0xA0, 0x00,
		0x0A, 0x38, 0x34, 0x39,
		0xEF, 0x21, 0x21, 0x35,
		0xEF, 0x21, 0x21, 0x34,
		0xA0, 0x80, 0x00, 0x3E,
		0xA0, 0x80, 0x00, 0x2B,
		0x80, 0x00, 0x08, 0x20,
		0x00, 0x0C, 0xA0, 0x00,
		0x00, 0xEF, 0x21, 0x21,
		0x34, 0x39, 0xEF, 0x21,
		0x21, 0x35, 0xEF, 0xA0,
		0x00, 0x08, 0x38, 0x34,
		0xEF, 0xA0, 0x00, 0x0C,
		0x38, 0x34, 0x39, 0xEF,
		0x35, 0xEF, 0x34, 0xA0,
		0x80, 0x00, 0x3E, 0xA0,
		0x80, 0x00, 0x2B, 0x80,
		0x00, 0x08, 0x20, 0x00,
		0x08, 0xA0, 0x00, 0x00,
		0xEF, 0x34, 0x39, 0xEF,
		0x35, 0xEF, 0x21, 0x21,
		0x34, 0xA0, 0x80, 0x00,
		0x3E, 0xEF, 0x34, 0xA0,
		0x80, 0x00, 0x3E, 0x2B,
		0x20, 0x00, 0x68, 0xEF,
		0xA0, 0x00, 0x06, 0x38,
		0x34, 0xA0, 0x80, 0x00,
		0x3E, 0xEF, 0xA0, 0x00,
		0x0A, 0x38, 0x34, 0xA0,
		0x80, 0x00, 0x3E, 0x2B,
		0x20, 0x00, 0x28, 0xEF,
		0xA0, 0x00, 0x04, 0x38,
		0x14, 0x60, 0xFC, 0x60,
		0xEF, 0xA0, 0x00, 0x06,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x08, 0x38, 0x34,
		0xEF, 0xA0, 0x00, 0x0A,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x0C, 0x38, 0x34,
		0x60, 0xFE, 0x03, 0x22,
		0x40, 0x00, 0x25, 0xEF,
		0xA0, 0x00, 0x04, 0x38,
		0x14, 0x60, 0xFC, 0x38,
		0xEF, 0xA0, 0x00, 0x0A,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x0C, 0x38, 0x34,
		0xEF, 0xA0, 0x00, 0x06,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x08, 0x38, 0x34,
		0x60, 0xFD, 0xDB, 0x22,
		0x40, 0x00, 0x65, 0xEF,
		0xA0, 0x00, 0x08, 0x38,
		0x34, 0xA0, 0x80, 0x00,
		0x3E, 0xEF, 0xA0, 0x00,
		0x0C, 0x38, 0x34, 0xA0,
		0x80, 0x00, 0x3E, 0x2B,
		0x20, 0x00, 0x28, 0xEF,
		0xA0, 0x00, 0x04, 0x38,
		0x14, 0x60, 0xFB, 0xF8,
		0xEF, 0xA0, 0x00, 0x06,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x08, 0x38, 0x34,
		0xEF, 0xA0, 0x00, 0x0A,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x0C, 0x38, 0x34,
		0x60, 0xFC, 0x66, 0x22,
		0x40, 0x00, 0x25, 0xEF,
		0xA0, 0x00, 0x04, 0x38,
		0x14, 0x60, 0xFB, 0xD0,
		0xEF, 0xA0, 0x00, 0x0A,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x0C, 0x38, 0x34,
		0xEF, 0xA0, 0x00, 0x06,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x08, 0x38, 0x34,
		0x60, 0xFC, 0x3E, 0x22,
		0xA0, 0x00, 0x00, 0x62,
		0x6C, 0x67, 0xE0, 0x00,
		0x12, 0x79, 0xA0, 0x01,
		0x17, 0x94, 0x60, 0xFB,
		0xA3, 0xA1, 0x25, 0x15,
		0x02, 0x22, 0xA0, 0x00,
		0x00, 0x80, 0x28, 0x37,
		0xA0, 0x00, 0x00, 0x80,
		0x2A, 0x37, 0xA0, 0x80,
		0x2E, 0x17, 0xA0, 0x01,
		0x00, 0x04, 0xEF, 0xA0,
		0x00, 0x10, 0x38, 0x15,
		0x02, 0xA0, 0x00, 0x00,
		0xEF, 0xA0, 0x00, 0x0A,
		0x38, 0x35, 0xEF, 0xA0,
		0x00, 0x0A, 0x38, 0x34,
		0xA0, 0x00, 0x0B, 0x2B,
		0x80, 0x00, 0x08, 0x20,
		0x01, 0x6B, 0xA0, 0x01,
		0x17, 0x14, 0x60, 0xFB,
		0x63, 0xEF, 0xA0, 0x00,
		0x0A, 0x38, 0x34, 0xA0,
		0x00, 0x0A, 0x27, 0x27,
		0x3B, 0x3A, 0x39, 0x80,
		0x80, 0x3F, 0xA0, 0x00,
		0x0A, 0x3B, 0x38, 0xEF,
		0xA0, 0x00, 0x08, 0x38,
		0x15, 0x02, 0xEF, 0xA0,
		0x00, 0x08, 0x38, 0x14,
		0x80, 0x00, 0x04, 0x60,
		0xFB, 0x58, 0xEF, 0xA0,
		0x00, 0x0A, 0x38, 0x34,
		0xA0, 0x00, 0x01, 0x3C,
		0x60, 0xFB, 0x36, 0xEF,
		0xA0, 0x00, 0x06, 0x38,
		0x35, 0xEF, 0xA0, 0x00,
		0x08, 0x38, 0x14, 0x80,
		0x00, 0x04, 0x60, 0xFB,
		0x84, 0xEF, 0xA0, 0x00,
		0x0A, 0x38, 0x34, 0xA0,
		0x00, 0x01, 0x3C, 0x60,
		0xFB, 0x17, 0xEF, 0xA0,
		0x00, 0x04, 0x38, 0x35,
		0xEF, 0xA0, 0x00, 0x10,
		0x38, 0x14, 0x20, 0x00,
		0xD0, 0xA0, 0x00, 0x03,
		0xEF, 0xA0, 0x00, 0x04,
		0x38, 0x34, 0xA0, 0x00,
		0x80, 0x38, 0xEF, 0xA0,
		0x00, 0x06, 0x38, 0x34,
		0xA0, 0x00, 0x80, 0x38,
		0xEF, 0xA0, 0x00, 0x0C,
		0x38, 0x34, 0xA0, 0x00,
		0x80, 0x38, 0xEF, 0xA0,
		0x00, 0x0E, 0x38, 0x34,
		0xA0, 0x00, 0x80, 0x38,
		0x60, 0xFD, 0xC4, 0x22,
		0xA0, 0x00, 0x02, 0xEF,
		0xA0, 0x00, 0x04, 0x38,
		0x34, 0xA0, 0x00, 0x03,
		0x3A, 0xA0, 0x00, 0x02,
		0x60, 0xFA, 0xC6, 0xA0,
		0x00, 0x80, 0x38, 0xEF,
		0xA0, 0x00, 0x06, 0x38,
		0x34, 0xA0, 0x00, 0x03,
		0x3A, 0xA0, 0x00, 0x02,
		0x60, 0xFA, 0xB2, 0xA0,
		0x00, 0x80, 0x38, 0xEF,
		0xA0, 0x00, 0x0C, 0x38,
		0x34, 0xA0, 0x00, 0x03,
		0x3A, 0xA0, 0x00, 0x02,
		0x60, 0xFA, 0x9E, 0xA0,
		0x00, 0x80, 0x38, 0xEF,
		0xA0, 0x00, 0x0E, 0x38,
		0x34, 0xA0, 0x00, 0x03,
		0x3A, 0xA0, 0x00, 0x02,
		0x60, 0xFA, 0x8A, 0xA0,
		0x00, 0x80, 0x38, 0x60,
		0xFD, 0x6D, 0x22, 0xA0,
		0x00, 0x01, 0xEF, 0xA0,
		0x00, 0x04, 0x38, 0x34,
		0xA0, 0x00, 0x01, 0x60,
		0xFA, 0x73, 0xA0, 0x00,
		0x80, 0x38, 0xEF, 0xA0,
		0x00, 0x06, 0x38, 0x34,
		0xA0, 0x00, 0x01, 0x60,
		0xFA, 0x63, 0xA0, 0x00,
		0x80, 0x38, 0xEF, 0xA0,
		0x00, 0x0C, 0x38, 0x34,
		0xA0, 0x00, 0x01, 0x60,
		0xFA, 0x53, 0xA0, 0x00,
		0x80, 0x38, 0xEF, 0xA0,
		0x00, 0x0E, 0x38, 0x34,
		0xA0, 0x00, 0x01, 0x60,
		0xFA, 0x43, 0xA0, 0x00,
		0x80, 0x38, 0x60, 0xFD,
		0x26, 0x22, 0x40, 0x00,
		0x0B, 0xA0, 0x00, 0x00,
		0x04, 0xEF, 0xA0, 0x00,
		0x10, 0x38, 0x15, 0x02,
		0xEF, 0xA0, 0x00, 0x06,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x0E, 0x38, 0x35,
		0xEF, 0xA0, 0x00, 0x04,
		0x38, 0x34, 0xEF, 0xA0,
		0x00, 0x0C, 0x38, 0x35,
		0xEF, 0xA0, 0x00, 0x0A,
		0x38, 0xB4, 0xA1, 0x25,
		0x35, 0x22, 0x40, 0xFE,
		0x85, 0xA0, 0x01, 0x18,
		0x80, 0x2C, 0x37, 0xA0,
		0x00, 0x6F, 0x80, 0x28,
		0x37, 0xA0, 0x00, 0x7C,
		0x80, 0x2A, 0x37, 0xA0,
		0x01, 0x2F, 0x17, 0xA0,
		0x01, 0x17, 0x14, 0x60,
		0xF9, 0xE2, 0xA0, 0x00,
		0x20, 0x38, 0x60, 0xF9,
		0xF9, 0xA0, 0x00, 0x05,
		0x60, 0xF9, 0xDE, 0xEF,
		0x21, 0x21, 0x35, 0xA0,
		0x01, 0x17, 0x14, 0x60,
		0xF9, 0xCA, 0xA0, 0x00,
		0x20, 0x38, 0x60, 0xFA,
		0x2C, 0xA0, 0x00, 0x05,
		0x60, 0xF9, 0xC6, 0xEF,
		0x35, 0xA0, 0x00, 0x03,
		0xEF, 0x34, 0xA0, 0x00,
		0x80, 0x38, 0xEF, 0x21,
		0x21, 0x34, 0xA0, 0x00,
		0x80, 0x38, 0xA0, 0x00,
		0x80, 0xEF, 0x34, 0x39,
		0xA0, 0x00, 0x01, 0x39,
		0xA0, 0x00, 0x80, 0xEF,
		0x21, 0x21, 0x34, 0x39,
		0xA0, 0x00, 0x01, 0x39,
		0x60, 0xFC, 0x84, 0x22,
		0xA0, 0x01, 0x17, 0x14,
		0x60, 0xF9, 0x89, 0xA0,
		0x00, 0x60, 0x38, 0x60,
		0xF9, 0xA0, 0xA0, 0x00,
		0x05, 0x60, 0xF9, 0x85,
		0xEF, 0x21, 0x21, 0x35,
		0xA0, 0x01, 0x17, 0x14,
		0x60, 0xF9, 0x71, 0xA0,
		0x00, 0x60, 0x38, 0x60,
		0xF9, 0xD3, 0xA0, 0x00,
		0x05, 0x60, 0xF9, 0x6D,
		0xEF, 0x35, 0xA0, 0x00,
		0x03, 0xEF, 0x34, 0xA0,
		0x00, 0x80, 0x38, 0xEF,
		0x21, 0x21, 0x34, 0xA0,
		0x00, 0x80, 0x38, 0xA0,
		0x00, 0x80, 0xEF, 0x34,
		0x39, 0xA0, 0x00, 0x01,
		0x39, 0xA0, 0x00, 0x80,
		0xEF, 0x21, 0x21, 0x34,
		0x39, 0xA0, 0x00, 0x01,
		0x39, 0x60, 0xFC, 0x2B,
		0x22, 0xA0, 0x01, 0x18,
		0x80, 0x2C, 0x37, 0xA0,
		0x00, 0x89, 0x80, 0x28,
		0x37, 0xA0, 0x00, 0x7C,
		0x80, 0x2A, 0x37, 0xA0,
		0x31, 0x2F, 0x17, 0xA0,
		0x00, 0x00, 0x62, 0x6C,
		0x67, 0xA0, 0x0A, 0xAF,
		0x80, 0x08, 0x37, 0xA0,
		0x0F, 0xFC, 0x80, 0x0A,
		0x37, 0xA0, 0x0F, 0xAA,
		0x80, 0x0C, 0x37, 0xA0,
		0x01, 0x00, 0x80, 0x22,
		0x37, 0xA0, 0x00, 0xF0,
		0x80, 0x24, 0x37, 0xA0,
		0x00, 0x00, 0x62, 0x6C,
		
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
	};
  
  static uint32_t rdaddr;
  rdaddr = (uint32_t)(read_address);
  
  uint8_t rdata = uxn_rom_RAM_SP_RF_1(
	  rdaddr,	// read address
	  0, 		// write value
	  0			// write enable
  );
  
  return rdata;
}